"""
CIRCLATOR
"""

import subprocess
from pathlib import Path

from latch import small_task, workflow
from latch.types import LatchDir, LatchFile
from typing import Optional

@small_task
def circlator_all(
    assembly: Optional[LatchFile],
    reads: Optional[LatchFile],
    output_dir: Optional[str],
    test_data: bool = False,
    nanopore_reads: bool = False
    ) -> LatchDir:


    local_dir = "/root/circlator_output/"
    remote_dir = f"latch:///{output_dir}/"

    if test_data==True:
        if output_dir==None:
            remote_dir="latch:///circlator_output"
        _cmd = [
            "circlator",
            "test",
            str(local_dir)
        ]

    else:
        if nanopore_reads==True:
            if output_dir==None:
                remote_dir="latch:///circlator_output"
            _cmd = [
                "circlator",
                "all",
                "--assembler canu",
                "--merge_min_id 85",
                "--merge_breaklen 1000",
                assembly.local_path,
                reads.local_path,
                str(local_dir)
            ]
        else:
            if output_dir==None:
                remote_dir="latch:///circlator_output"
            _cmd = [
                "circlator",
                "all",
                "--assembler canu",
                assembly.local_path,
                reads.local_path,
                str(local_dir)
            ]

    subprocess.run(_cmd)

    return LatchDir(local_dir, remote_dir)

@workflow
def CIRCLATOR(
    assembly: Optional[LatchFile] = None,
    reads: Optional[LatchFile] = None,
    output_dir: Optional[str]= None,
    test_data: bool = False,
    nanopore_reads: bool = False
    ) -> LatchDir:

    """ A tool to circularize genome assemblies.

    ## CIRCLATOR

    This workflow is an adaptation of Sanger Pathogens' Circlator tool.
    Circlator is a post-assembly improvement toolkit for producing correctly represented circular DNA structures.
    It uses local assemblies of corrected long reads at contig ends to circularize contigs.
    This avoids searching for a sequence in common between low-quality contig ends, and allows circularization even when overlaps are not present.

    ## Introduction
    Circlator will attempt to identify each circular sequence and output a linearised version of it. It does this by assembling all reads that map to contig ends and comparing the resulting contigs with the input assembly.

    ## Testing CIRCLATOR
    The pipeline can be run on a small testing dataset; to do so, simply check the option "Run the workflow on a test dataset" in the parameters section. No other data is needed.


    ## Input data:
    - Genome assembly
    - Sequencing reads
    - Output directory path (default: /circlator_output)

    Circlator requires corrected reads and assembled contigs as input. It has been run successfully on the output of HGAP, PBcR and SPRAI. The location of the input files required by Circlator made by each assembler are listed below.

    | Assembler            | Corrected reads        | Contigs |
    |----------------------|------------------------|---------|
    | HGAP                 | `data/corrected.fasta` | `data/polished_assembly.fasta.gz` |
    | HGAP via SMRT Portal | `Preassembled Reads` [1]| `Polished Assembly` [1] |
    | PBcR [2]             | `lib.fasta`            | `lib/9-terminator/asm.scf.fasta` |
    | SPRAI                | `c01.fin.idfq.gz`      | `CA/9-terminator/asm_CA_01_YYYYMMDD_HHMMSS.scf.fasta` [3] |

    [1] These files can be downloaded from the Assembly subsection of the Data panel of the left hand sidebar when viewing RS_HGAP_Assembly data in SMRT Portal. Both files should be downloaded in fasta format.

    ![image](https://github.com/sanger-pathogens/circlator/wiki/images/SMRTportal.png)

    [2] Assuming that the option `-l lib` was used.

    [3] The filename is different for each run of SPRAI. YYYYMMDD and HHMMSS must be replaced with the date and time.

    ## Output:
    - Folder containing the circularized genome (OUT/06.fixstart.fasta) and all other data generated by CIRCLATOR.

    ## Citation
    If you use this software please cite:

    __Circlator: automated circularization of genome assemblies using long sequencing reads__
    Hunt et al, Genome Biology 2015 Dec 29;16(1):294. doi: [10.1186/s13059-015-0849-0](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-015-0849-0)

    __[BWA](http://arxiv.org/abs/1303.3997):__ Li, H et al. Aligning sequence reads, clone sequences and assembly contigs with BWA-MEM. arXiv:1303.3997.

    __[MUMmer](http://genomebiology.com/content/5/2/R12):__ Kurtz, S. et al. Versatile and open software for comparing large genomes. Genome Biol. 5, R12 (2004).

    __[Prodigal](http://www.biomedcentral.com/1471-2105/11/119):__ Hyatt, D. et al. Prodigal: prokaryotic gene recognition and translation initiation site identification. BMC Bioinformatics 11, 119 (2010).

    __[SAMtools](http://bioinformatics.oxfordjournals.org/content/25/16/2078.abstract):__ Li, H. et al. The Sequence Alignment/Map format and SAMtools. Bioinformatics 25, 2078–9 (2009).

    __[SPAdes](http://online.liebertpub.com/doi/abs/10.1089/cmb.2012.0021)__: Bankevich, A. et al. SPAdes: a new genome assembly algorithm and its applications to single-cell sequencing. J. Comput. Biol. 19, 455–77 (2012)

    ## Further Information
    For more information on this software see:
    * the [Circlator website](http://sanger-pathogens.github.io/circlator/)
    * the [Circlator wiki page](https://github.com/sanger-pathogens/circlator/wiki)

    ----

    __metadata__:
        display_name: Circlator
        author:
            name:
            email:
            github: https://github.com/sanger-pathogens
        repository: https://github.com/sanger-pathogens/circlator
        license:
            id: GPLv3

    Args:
        test_data:
            This option allows you to check out how CIRCLATOR works, and browse the output directory)
            __metadata__:
            display_name: Run the workflow on a test dataset

        output_dir:
            Output directory path (Must not exist before running worlflow)
            __metadata__:
                display_name: "Output Directory"

        assembly:
          Assembly

          __metadata__:
            display_name: Assembly file in FASTA format

        reads:
          The reads can be in any format that BWA MEM accepts (eg FASTA, FASTQ and optionally gzipped).

          __metadata__:
            display_name: Sequencing reads

        nanopore_reads:
          Currently, nanopore data is of worse quality than PacBio. The parameters must be relaxed a little to use nanopore reads because the defaults assume PacBio data.

          __metadata__:
            display_name: Check this option if you are using Nanopore reads

    """
    return(circlator_all(assembly=assembly, reads=reads, output_dir=output_dir, test_data=test_data, nanopore_reads=nanopore_reads))
